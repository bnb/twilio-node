'use strict';

/* jshint ignore:start */
/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */
/* jshint ignore:end */

var Holodeck = require('../../../holodeck');  /* jshint ignore:line */
var Request = require(
    '../../../../../lib/http/request');  /* jshint ignore:line */
var Response = require(
    '../../../../../lib/http/response');  /* jshint ignore:line */
var RestException = require(
    '../../../../../lib/base/RestException');  /* jshint ignore:line */
var Twilio = require('../../../../../lib');  /* jshint ignore:line */


var client;
var holodeck;

describe('OpenidDiscovery', function() {
  beforeEach(function() {
    holodeck = new Holodeck();
    client = new Twilio('ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', 'AUTHTOKEN', {
      httpClient: holodeck
    });
  });
  it('should generate valid fetch request',
    function(done) {
      holodeck.mock(new Response(500, {}));

      var promise = client.oauth.v1.openidDiscovery().fetch();
      promise.then(function() {
        throw new Error('failed');
      }, function(error) {
        expect(error.constructor).toBe(RestException.prototype.constructor);
        done();
      }).done();

      var url = 'https://oauth.twilio.com/v1/well-known/openid-configuration';

      holodeck.assertHasRequest(new Request({
        method: 'GET',
        url: url
      }));
    }
  );
  it('should generate valid fetch response',
    function(done) {
      var body = {
          'issuer': 'https://iam.twilio.com',
          'authorization_endpoint': 'https://oauth.twilio.com/oauth2/authorize',
          'device_authorization_endpoint': 'https://oauth.twilio.com/oauth2/device/authorize',
          'token_endpoint': 'https://oauth.twilio.com/oauth2/token',
          'userinfo_endpoint': 'https://oauth.twilio.com/oauth2/userinfo',
          'revocation_endpoint': 'https://oauth.twilio.com/oauth2/revoke',
          'jwk_uri': 'https://oauth.twilio.com/oauth2/certs',
          'response_type_supported': [
              'code',
              'token'
          ],
          'subject_type_supported': [
              'account_sid',
              'user_sid'
          ],
          'id_token_signing_alg_values_supported': [
              'ECDSA',
              'RSA256'
          ],
          'scopes_supported': [
              'openid',
              'profile',
              'email'
          ],
          'claims_supported': [
              'act',
              'aud',
              'cid',
              'device_id',
              'exp',
              'jti',
              'iat',
              'iss',
              'nbf',
              'scp',
              'sub'
          ],
          'url': 'https://oauth.twilio.com/v1/well-known/openid-configuration'
      };

      holodeck.mock(new Response(200, body));

      var promise = client.oauth.v1.openidDiscovery().fetch();
      promise.then(function(response) {
        expect(response).toBeDefined();
        done();
      }, function() {
        throw new Error('failed');
      }).done();
    }
  );
});
