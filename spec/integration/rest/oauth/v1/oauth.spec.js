'use strict';

/* jshint ignore:start */
/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */
/* jshint ignore:end */

var Holodeck = require('../../../holodeck');  /* jshint ignore:line */
var Request = require(
    '../../../../../lib/http/request');  /* jshint ignore:line */
var Response = require(
    '../../../../../lib/http/response');  /* jshint ignore:line */
var RestException = require(
    '../../../../../lib/base/RestException');  /* jshint ignore:line */
var Twilio = require('../../../../../lib');  /* jshint ignore:line */


var client;
var holodeck;

describe('Oauth', function() {
  beforeEach(function() {
    holodeck = new Holodeck();
    client = new Twilio('ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', 'AUTHTOKEN', {
      httpClient: holodeck
    });
  });
  it('should generate valid fetch request',
    function(done) {
      holodeck.mock(new Response(500, {}));

      var promise = client.oauth.v1.oauth().fetch();
      promise.then(function() {
        throw new Error('failed');
      }, function(error) {
        expect(error.constructor).toBe(RestException.prototype.constructor);
        done();
      }).done();

      var url = 'https://oauth.twilio.com/v1/certs';

      holodeck.assertHasRequest(new Request({
        method: 'GET',
        url: url
      }));
    }
  );
  it('should generate valid fetch response',
    function(done) {
      var body = {
          'keys': [
              {
                  'alg': 'ES256',
                  'kid': 'IC10c8172f35dd36f20d9ed2fcc0b818c7',
                  'key_ops': [],
                  'use': 'sig',
                  'crv': 'P-256',
                  'x': 'hrJ4NKauVYBiREgIY_EPPj10zHIiOHeIf3-LGODt_KM',
                  'y': 'c3IcyhpvfMIMpqd_ku9Q_4n20nMlelUF-zSmRXEIFEU',
                  'kty': 'EC'
              }
          ],
          'url': 'https://oauth.twilio.com/v1/certs'
      };

      holodeck.mock(new Response(200, body));

      var promise = client.oauth.v1.oauth().fetch();
      promise.then(function(response) {
        expect(response).toBeDefined();
        done();
      }, function() {
        throw new Error('failed');
      }).done();
    }
  );
});
